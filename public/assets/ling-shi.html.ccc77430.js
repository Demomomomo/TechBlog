import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as e,a as n,e as s,f as o,d as c,r as l}from"./app.e147a21b.js";const i={},r={href:"https://ac.nowcoder.com/acm/contest/46813/I",target:"_blank",rel:"noopener noreferrer"},u=c(`<p>题意：有m个灵石，进行n场游戏，在每局游戏进行之前需要压正整数的灵石，对于每一局游戏来说：<br> 输：减掉所压的灵石的数量<br> 赢：加上所压的灵石数量和手里现有的灵石的数量<br> 已知只有一局赢了，那么在不会亏损灵石的条件下，请你设计一个最优方案。 对于两个方案来说，如果前i-1局进行完之后，手里剩余的灵石一样，第i局赢了，第一个方案赢得的灵石数量比第二个赢得的灵石数量多的话，说明第一个方案是最优方案。</p><p>比如进行3局，第一个方案每局灵石数为：2 3 6，第二个方案每局灵石数为2 2 7：<br> 如果都是第一局赢了，那么方案1赢得的灵石为11+2，方案2 赢得的灵石数为11+2，相等。<br> 如果都是第二局赢了，那么方案1赢得的灵石为11-2+3，方案2赢得的灵石的数量为11-2+2，方案1赢得的灵石数量多，所以方案1是最优方案。</p><p>思路：当在第i局赢的时候，手里剩余的灵石是a[i]+a[i+1]+...+a[n],赢得的灵石是a[i]，获得的总灵石数是2*a[i]+...+a[n],保证不亏损说明获得的总灵石数&gt;=m，那么化简一下: 2 <em>a[i]+a[i+1]+...+a[n]&gt;=a[1]+a[2]+...+a[n]<br> a[i]&gt;=a[1]+a[2]+...a[i-1]<br> s[i]-s[i-1]&gt;=s[i-1]<br> s[i]&gt;=2</em>s[i-1]</p><p>找最优方案实际上就是在前面数都相等的情况下，第一个不相等的数大，即字典序大。</p><p>当一个数组的字典序大，那么他的前缀和的字典序也大：<br> 对于第一个不同的数，他的数字大，前缀和也大</p><p>那么实际上就是构造满足条件:s[i]&gt;=2*s[i-1],s[n]&lt;=m的前缀和数组，再求出来原数组，如果原数组中有&lt;=0的数，那么就不行。</p><p>如果前面的数组都一样，肯定是s越大越好，所以s[n]应该取m，那么就从后往前构造s[i-1]=s[i]/2就可以了。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
<span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>
	s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function k(d,m){const a=l("ExternalLinkIcon");return t(),e("div",null,[n("p",null,[s("原题链接："),n("a",r,[s("https://ac.nowcoder.com/acm/contest/46813/I"),o(a)])]),u])}const y=p(i,[["render",k],["__file","ling-shi.html.vue"]]);export{y as default};
