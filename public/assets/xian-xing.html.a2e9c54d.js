import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c,a as n,e as s,f as t,b as i,d as p,r as u}from"./app.e147a21b.js";const l={},r=n("h2",{id:"最短编辑距离",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#最短编辑距离","aria-hidden":"true"},"#"),s(" 最短编辑距离")],-1),k={href:"https://www.acwing.com/problem/content/904/",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),b=n("br",null,null,-1),m=n("br",null,null,-1),f=n("br",null,null,-1),v=n("br",null,null,-1),j=p(`<p>求将A变为b至少需要多少次操作。</p><p>思路：<br> f[i][j]表示A[1<sub>i]变为B[1</sub>j]需要的最小操作次数。<br> 因为求最小值，先将f初始化为极大值。<br> 因为当ab字符串都是空的时候，不用进行操作也一样，那么f[0][0]=0.<br> 将a[1~i]变为b[0]的时候，我们需要将a全部删除，那么f[i][0]=i<br> 将a[0]变为b[1~i]的时候，我们需要将a加上i个字符，那么f[0][i]=i<br> 对于第一个删除操作，当a[1<sub>i-1]已经变为b[1</sub>j]的时候，我们需要将a的i删除，那么f[i][j]=min(f[i][j],f[i-1][j]+1)<br> 对于第二个插入操作，当a[1<sub>i]已经变为b[1</sub>j-1]，那么我们需要再a的最后加上一个字符，那么f[i][j]=min(f[i][j],f[i][j-1]+1)<br> 对于第三个替换操作，如果a[i]!=b[j]，那么就需要替换，那么f[i][j]=min(f[i][j],f[i-1][j-1]+1)<br> 那么当a[i]==b[j]的时候，我们不用操作，f[i][j]=min(f[i][j],f[i-1][j-1]+1)</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1500</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>
	string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>
	cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span>
	cin<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>
	cin<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>
	a<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>a<span class="token punctuation">;</span>
	b<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>b<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
	f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			
			f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="搬寝室" tabindex="-1"><a class="header-anchor" href="#搬寝室" aria-hidden="true">#</a> 搬寝室</h2>`,4),h={href:"https://acm.hdu.edu.cn/showproblem.php?pid=1421",target:"_blank",rel:"noopener noreferrer"},_=p('<p>题意：<br> 有n件物品，从中选择2*k件物品搬，搬一次时左手拿一个物品，右手拿一个物品，这一次的疲劳度是左右手物品重量的差的平方，那么求搬完这些物品之后最低的疲劳度是多少。<br> 思路：<br> 第一感觉是每次选的两个值相差的越小越好，那么我们猜测一下每次选是不是一定是两个相邻的数。<br> 比如有四个数：a &lt; b &lt; c &lt; d,那么有三种搬法：<br> ab和cd，ac和bd，bc和ad。<br> ac和bd的差肯定大于ab和cd差，那么我们主要看ab和cd以及bc和ad。<br> 用图来画出他们的差值，就是：<br><img src="https://img-blog.csdnimg.cn/3f9a15bbf88948799e4bdd02ec6f2c86.jpeg#pic_center" alt="Pulpit rock" width="304" height="228"><br> 很容易能看出ab和cd的差值比ac和bd的差值小，那么我们每次选择的时候，选相邻的两个数的差值是最小的。<br> f[i][j]表示前i个物品中选j对<br> 我们可以分成选第i件和不选第i件两种情况：<br> 选第i件：因为选择相邻两个最优，那么我们就只能选择a[i-1]和a[i]，并且在前i-2个物品中选j-1对。<br> 不选第i件：那么就从前i-1个里面选j对，那么就是f[i-1][j]<br> 那么这两种状态取最大即可。<br> 注意将a数组排序。</p>',1);function g(w,y){const a=u("ExternalLinkIcon");return e(),c("div",null,[r,n("p",null,[s("原题链接："),n("a",k,[s("https://www.acwing.com/problem/content/904/"),t(a)]),d,s(" 题意："),b,s(" 给定两个字符串A和B，现在要将A经过若干操作变为B，可进行的操作有："),m,s(" 1.删除–将字符串A中的某个字符删除。"),f,s(" 2.插入–在字符串A的某个位置插入某个字符。"),v,s(" 3.替换–将字符串A中的某个字符替换为另一个字符。")]),j,n("p",null,[s("原题链接："),n("a",h,[s("https://acm.hdu.edu.cn/showproblem.php?pid=1421"),t(a)])]),_,i(` \`\`\`cpp
#include<bits/stdc++.h>
using namespace std;
int n,m;
const int N=2005;
int f[N][N];
int a[N];
int main(){
	cin>>n>>m;
	for(int i=1;i<=n;i++)cin>>a[i];
	sort(a+1,a+1+n);
	memset(f,0x3f,sizeof f);
	for(int i=0;i<=n;i++)f[i][0]=0;
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m&&j*2<=i;j++){
			f[i][j]=min(f[i-1][j],f[i-1][j-1]+(a[i]-a[i-1])*(a[i]-a[i-1]));
		}
	}
	cout<<f[n][m]<<endl;
	return 0;
}


\`\`\` `)])}const A=o(l,[["render",g],["__file","xian-xing.html.vue"]]);export{A as default};
