import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,a as n,e as s,f as e,d as c,r as l}from"./app.e147a21b.js";const i={},u=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),k=n("p",null,"一般就是求最短距离或者最小步数，思路就是把初始状态加入队列中，写一个while循环，条件是队列不空，每次取队头然后拓展队头。一般需要一个额外的数组来记录每个位置的距离，并需要在刚开始的时候初始化。",-1),r=n("h2",{id:"青蛙跳杯子",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#青蛙跳杯子","aria-hidden":"true"},"#"),s(" 青蛙跳杯子")],-1),d={href:"https://www.lanqiao.cn/problems/102/learning/?page=1&first_category_id=1&sort=students_count&name=%E9%9D%92%E8%9B%99%E8%B7%B3%E6%9D%AF%E5%AD%90",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),m=n("br",null,null,-1),b=n("br",null,null,-1),_=n("br",null,null,-1),f=n("br",null,null,-1),h=n("br",null,null,-1),w=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
string sr<span class="token punctuation">,</span>en<span class="token punctuation">;</span>
map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> d<span class="token punctuation">;</span>

<span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span>string st<span class="token punctuation">)</span><span class="token punctuation">{</span>
	queue<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
	q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
	d<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
		string s<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
		q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
		<span class="token keyword">int</span> id<span class="token punctuation">;</span>
		string op<span class="token operator">=</span>s<span class="token punctuation">;</span>
		<span class="token keyword">int</span> dist<span class="token operator">=</span>d<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				id<span class="token operator">=</span>i<span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">int</span> idx<span class="token operator">=</span>id<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>idx<span class="token operator">&gt;=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				d<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>dist<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span>en<span class="token punctuation">)</span> <span class="token keyword">return</span> d<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
				q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> 
			<span class="token punctuation">}</span>
			<span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	cin<span class="token operator">&gt;&gt;</span>sr<span class="token operator">&gt;&gt;</span>en<span class="token punctuation">;</span>
	<span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token function">bfs</span><span class="token punctuation">(</span>sr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function y(g,x){const a=l("ExternalLinkIcon");return p(),o("div",null,[u,k,r,n("p",null,[s("原题链接："),n("a",d,[s("https://www.lanqiao.cn/problems/102/learning/?page=1&first_category_id=1&sort=students_count&name=青蛙跳杯子"),e(a)]),v,s(" 题意："),m,s(" 有一排杯子，其中只有一个空杯子，剩下的都是青蛙。青蛙有两种颜色：黑（W）和白（B），每个青蛙可以有一下几种操作：1.跳入相邻的空杯子 2.隔一个青蛙跳入一个空杯子 3.隔两个青蛙跳入一个空杯子。"),b,s(" 那么给定一个初始状态和一个结果状态，求能从初始状态到达结果状态最小有青蛙跳几步。"),_,s(" 思路："),f,s(" 相当于一个空杯子跳，可以向左1,2,3步或者向右1,2,3步，求最小步数。"),h,s(" 那么我们可以用bfs，将初始状态加入队列，当队列不空的时候每次取队头，找到空杯子然后进行6个步数的跳动。如果没出现过就更新加入队列中，如果第一次找到结果状态立刻返回。")]),w])}const B=t(i,[["render",y],["__file","bfs.html.vue"]]);export{B as default};
